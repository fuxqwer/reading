# 正则表达式

写正则表达式时，需要在对欲检索文本的了解程度与检索精确性之间求得平衡。

匹配过程存在优先级之分：并联最高，串联次之，重复最低。不过括号可以用来改变优先级。

## 基础

### 元字符(meta characters)

> - `.` 
>
>   - 换行符以外的任意一个字符  
>
>   - 在 Java 中表示：Any character (may or may not match [line terminators](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#lt))
>
>     - 理解 line terminator
>
>       > 是一个或两个字符（`one- or two-character sequence`）来标识一个字符序列的结束。
>      
>       ```markdown
>       公认的行结束符号：
>             1. A newline (line feed) character ('\n'),
>             2. A carriage-return character followed immediately by a newline character ("\r\n"),
>             3. A standalone carriage-return character ('\r'),
>             4. A next-line character ('\u0085'),
>             5. A line-separator character ('\u2028'), or
>             6. A paragraph-separator character ('\u2029).
>       ```
>      
>       ```markdown
>       注意：
>               1. If UNIX_LINES mode is activated, then the only line terminators recognized are newline characters.
>               2. The regular expression . matches any character except a line terminator unless the DOTALL flag is specified.
>               3. By default, the regular expressions ^ and $ ignore line terminators and only match at the beginning and the end, respectively, of the entire input sequence. If MULTILINE mode is activated then ^ matches at the beginning of input and after any line terminator except at the end of input. When in MULTILINE mode $ matches just before a line terminator or the end of the input sequence.[更改 ^ 和$ 的含义使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$ 的精确含意是:匹配\n 之前的位置以及字符串结束前的位置.)]
>       ```
>
> - `^` 
>
>   - 在检查一行文本时表示一行的开始（匹配的是一个位置）;
>
>   - 在字符组中表示排除[negate]（`非` 的意思）
>   
>     ```markdown
>     举例：^cat 匹配的是以 c 作为一行的第一个字符，紧接一个 a ，紧接一个 t 的文本
>     ```
>
> - `$` 
>
>   - 在检查一行文本时表示一行的结束（匹配的是一个位置）
>
> - `\b` 与 `\B`
>
>   -  匹配单词的开始或结束
>   - 匹配不是单词开头或结束的位置
>
> - `\s` 与 `\S`
>
>   - 匹配任意空白符（包括空格，制表符(Tab)，换行符，中文全角空格等）
>
> - `\w` 与 `\W`
>
>   - > 匹配字母或数字或下划线或汉字（不包括标点符号）。
>
>   - > 在 Java 中表示： A word character: `[a-zA-Z_0-9]`
>
> - `\d` 与 `\D`
>
>   - > 匹配数字。在 Java 中表示：A digit: `[0-9]`
>
> - `|` 
>
>   - 多选，匹配分割两边的任意一个表达式
>
> - `\<` `\>` ~~元字符序列，单词的分界符~~ 在 Java 中使用`\b`
>
> - `[···]`  字符组(character class)，表示其中的某一个（`或` 的意思）
>
>   - `-` 字符组元字符 - 连字符，表示一个范围；
>     - 如果它不在字符组中则表示匹配普通的连字符号
>     - 如果它出现在字符组的开头，也只表示一个普通的字符
>
>   - `^` 在字符组中的开头表示排除（negate），表示匹配一个未列出的字符
>   
>     ```markdown
>     举例：[^x] 匹配一个不等于 x 的字符
>     [a-d[m-p]] 		a through d, or m through p: [a-dm-p] (union)
>     [a-z&&[def]]	d, e, or f (intersection)
>     [a-z&&[^bc]]	a through z, except for b and c: [ad-z] (subtraction)
>     ```
>
> - `()` 分组
>
>   - 捕获组可以通过从左到右计算其开括号来编号，**组零始终代表整个表达式。**
>
>     - ```markdown
> 例如：表达式 ((A)(B(C))) 的分组情况如下，
>       1. ((A)(B(C)))
>       2. (A)
>       3. (B(C))
>       4. (C)
>          ```
>    ```
>  
>       ```
>   - - ~~注释 - `(?#comment)~~`  在看到网上的时候正则知道要表达什么
>    
> ```markdown
> 例如：2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d \d?(?#0-199)
> ```
> 
>- `?` 可选项，只作用于之前紧邻的元素，单次可选，即零次或一次
> 
>  - `(?:···)` 用来分组文本，但不捕获
> 
>  - `(?=···)` 顺序环视，表示如果当前位置的右边字符是 `···` 则匹配成功，它只寻找能够匹配的位置，而不会真正 “占用” 这些字符
> 
>     - `(?<=···)` 逆序环视，子表达式能够匹配左侧文本
>    
>      - 贪婪（默认情况下）与懒惰（在量词后再上`?` 如下）
>    
>    |  语法  |              含义               |
>    | :----: | :-----------------------------: |
>    |   *?   |   重复任意次，但尽可能少重复    |
>    |   +?   | 重复1次或更多次，但尽可能少重复 |
>|   ??   |  重复0次或1次，但尽可能少重复   |
> | {n,m}? |   重复n到m次，但尽可能少重复    |
>| {n,}?  |   重复n次以上，但尽可能少重复   |
> 
>- `*` 任意次数均可，即零次或更多次
> - ` +` 至少一次，即一次或更多次
>- `{}` 
> 
>   - `{n}` 重复 n 次
>   - `{n,}` 重复 n 次或更多次，如果 n==1 则与 `+` 相同
>  - `{n,m}` 重复 n 到 m 次
> - `\t`  The tab character (`'\u0009'`)
>- `\r`  The carriage-return character ('\u000D')
> - `\f`  The form-feed character ('\u000C')
>- `\a` The alert (bell) character ('\u0007')
> - `\e` The escape character ('\u001B')
>- `\cx` The control character corresponding to x
> - `\h` A horizontal whitespace character: [ \t\xA0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000]
>- `\v` A vertical whitespace character: [\n\x0B\f\r\x85\u2028\u2029]
> - `\s` A whitespace character: [ \t\n\x0B\f\r]
>- 锚点：简单锚点（`^`，`$`，`\b`）和复杂锚点（环视）

### 文字（literal）

> 1. 普通文本字符（nomal text characters）

> 2. 转义 `\`

## 匹配原理

1. 优先选择最左端（最靠开头）的匹配结果

   > 匹配先从需要查找的字符串的起始位置尝试匹配。这里的“尝试匹配”的意思是：在当前位置测试整个正则表达式能匹配的每个可能。如果在当前位置测试了所有的可能之后找不到匹配结果，就需要从字符的第二个字符之前的位置开始重新尝试……只有在尝试过所有的起始位置（直到字符串的最后一个字符）都找不到匹配结果的情况下，才会报告失败。

2. 标准的匹配量词（`*` `+` `?` `{m,n}`）是匹配优先的

##  Java 中的正则

[API]: https://docs.oracle.com/javase/8/docs/api/	"详见"

使用的正则引擎是 NFA（非确定性有限状态自动机）即表达式主导。【把正则表达式转换成一个图的邻接表，然后通过跳表的形式判断一个字符串是否匹配该正则。】

另外正则还有 DFA（确定性有限状态自动机）即文本主导。【在语法解析的时候，构造出的一个有向图。然后通过深搜的方式，去一条路径一条路径的递归尝试。】

### String

```java
public boolean matches(String regex) {
		return Pattern.matches(regex, this);
}
```

```java
public String[] split(String regex) {
    return split(regex, 0);
}
```

### java.util.regex

> Pattern 
>
> - `Pattern.CASE_INSENSITIVE` 忽略大小写模式
> - `Pattern.COMMENTS` 宽松排列与注释模式
> - `Pattern.DOTALL` 点号通配模式（单行模式）

> Matcher

# 常见名词解释

> - 回溯：在使用`贪婪匹配`或者`惰性匹配`或者`或匹配`进入到匹配路径选择的时候，遇到失败的匹配路径，尝试走另外一个匹配路径的这种行为，称作回溯。

# 好用的工具

[ 网站]: https://regex101.com/	"只能是 js 等，方便编写与测试"
[app]: http://www.regexbuddy.com/	"支持 Java 可选版本，Mac 下没有"
